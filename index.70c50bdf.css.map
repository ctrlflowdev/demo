{"mappings":";AAuBE;;;;;;;;;;AAUA;;;;;;;;AAQA;;;;;AAGC;;;;;;;ACqCF;;;;;;;AAOC;;;;;;;AAKC;;;;;;;;;;;;AAcD;;;;AAEC;;;;;;;;;;;AAaD;;;;;AAKA;;;;;AAGC;;;;AAMD;;;;;AAKA;;;;AAEC;;;;;;;;;AAWD;;;;AAEC;;;;;AAOD;;;;AAIA;;;;ACpHA;;;;;;;;;;ACrCA;;;;;;ACAA;;;;;;ACsCA;;;;;;;;;AASA;;;;AAEC;;;;;;;;AAQA;;;;AClCD;;;;;;;;;;AAWA;;;;;;ACdA;;;;;;;;;;ACDA;;;;;;;;;;ACyBA;;;;;;;;;;;;;;;;;AAiBA;;;;AAEC;;;;;AAKA;;;;;AAMA;;;;;;;;;;;AAaD;;;;ACuDA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;AAIC;;;;;AAOD;;;;AAIA;;;;AAIA;;;;;;;AAKC;;;;;AAKA;;;;;ACvJD;;;;;;;;;;;;AAUC;;;;;;;;;;;;;;AAgBD;;;;;;;;;AAOC;;;;;ACVD;;;;;;;;;;;;;;;AAgBA;;;;;;;;;AASA;;;;;;;;;;;;;;AAcA;;;;;AAGC;;;;AAMD;;;;AC/FA;;;;;AAGC;;;;;;;;;AAWD;;;;;;;;;;AAUA;;;;AAMC;;;;;;;;;;;;;;AAgBD;;;;;ACPA;;;;;;;;;;;;AAUC;;;;;;;;;;AAYD;;;;;AAGC;;;;;;;AASD;;;;AC7EA;;;;;;;;;;AAUA;;;;;;AAMA;;;;;AC8DA;;;;;;;;AAQA;;;;;;AAMA;;;;;;AAMA;;;;;;;;;AAOC;;;;;;;AASD;;;;;;AAIC;;;;;;;;;;;;AAcD;;;;ACtID;;;;;;;;ACtBD;;;;AAA2C;;;;AAAoD;;;;AAAgD;;;;AAAyC;;;;;;AAAmE;;;;AAA6C;;;;;AAAyC;;;;AAA0C;EAAsC;;;;EAAuC","sources":["src/components/Nav.svelte","src/components/pages/WorkflowLookup.svelte","src/components/pages/editor/expressions/types/ActionResultExpression.svelte","src/components/pages/editor/expressions/types/TextExpression.svelte","src/components/pages/editor/expressions/types/NumberExpression.svelte","src/components/pages/editor/expressions/Expression.svelte","src/components/pages/editor/expressions/types/DecisionExpression.svelte","src/components/pages/editor/expressions/types/ConditionExpression.svelte","src/components/pages/editor/expressions/types/AndOrExpression.svelte","src/components/pages/editor/expressions/ExpressionSelector.svelte","src/components/pages/editor/NodeEditor.svelte","src/components/pages/editor/Node.svelte","src/components/pages/editor/Path.svelte","src/components/pages/editor/AddStep.svelte","src/components/pages/editor/Fork.svelte","src/components/pages/editor/Triggers.svelte","src/components/pages/editor/Workflow.svelte","src/components/App.svelte","node_modules/modern-css-reset/dist/reset.min.css"],"sourcesContent":["<script>\r\n  import { getContext } from \"svelte\";\r\n\r\n  let history = getContext('history')\r\n</script>\r\n\r\n<nav class=\"nav-bar\">\r\n  <div class=\"nav-banner\" on:click={() => history.pushState('/')}>\r\n    <span class=\"brand-segment-lowcode\">lowcode</span><span class=\"brand-segment-devkit\">DevKit</span>\r\n  </div>\r\n  <!-- <div class=\"nav-items\">\r\n    <div class=\"nav-item nav-active\">\r\n      Editor\r\n    </div>\r\n    <div class=\"nav-item\">\r\n      Activity\r\n    </div>\r\n  </div> -->\r\n</nav>\r\n\r\n<style>\r\n  @import url('https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@300&family=Roboto:wght@100;300;400;500&display=swap');\r\n\r\n  .nav-bar {\r\n    width: 100%;\r\n    height: 60px;\r\n    background-color: rgb(36, 36, 36);\r\n    box-shadow: 0 -10px 15px;\r\n    display: flex;\r\n    align-items: center;\r\n    color: white;\r\n  }\r\n\r\n  .nav-banner {\r\n    display: inline-block;\r\n    margin-left: 45px;\r\n    text-align: center;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .brand-segment-lowcode {\r\n    font-weight: 300;\r\n    font-family: 'Roboto Mono', monospace;\r\n  }\r\n\r\n  .brand-segment-devkit {\r\n    font-weight: 500;\r\n    font-family: 'Roboto', sans-serif;\r\n    color: rgb(234, 136, 0);\r\n    font-size: 25px;\r\n  }\r\n\r\n  .nav-items {\r\n    display: inline-block;\r\n    font-family: 'Roboto', sans-serif;\r\n  }\r\n\r\n  .nav-item {\r\n    display: inline-block;\r\n    margin-right: 30px;\r\n    font-size: 18px;\r\n    font-weight: 300;\r\n  }\r\n\r\n  .nav-active {\r\n    font-size: 22px;\r\n    margin-right: 45px;\r\n    font-weight: 400;\r\n  }\r\n</style>\r\n","<script>\r\n  import actions from \"./editor/actions\"\r\n  import { getContext } from \"svelte\";\r\n\r\n  let selectedWorkflow\r\n  let metadata\r\n  let workflows = []\r\n\r\n  let history = getContext('history')\r\n\r\n  $: {\r\n    if (!selectedWorkflow) {\r\n      actions.getAllWorkflows().then(wf => workflows = wf)\r\n    }\r\n  }\r\n\r\n  $: {\r\n    if (!metadata) {\r\n      actions.getMetadata().then(m => metadata = m)\r\n    }\r\n  }\r\n\r\n  function createWorkflow() {\r\n    history.pushState('/workflow/')\r\n  }\r\n\r\n  function openWorkflow(workflowId) {\r\n    history.pushState(`/workflow/?workflow-id=${workflowId}`)\r\n  }\r\n</script>\r\n\r\n<div class=\"content-area\">\r\n  <h2 class=\"section-name\">\r\n    Workflows\r\n    <span class=\"btn\" on:click={createWorkflow}>\r\n      New +\r\n    </span>\r\n  </h2>\r\n  <div class=\"section-container\">\r\n    <table class=\"section-table\">\r\n      <tr height=\"60px\" class=\"section-header\">\r\n        <th>Title</th>\r\n        <!-- <th>Type</th> -->\r\n        <th>Last Modified</th>\r\n      </tr>\r\n      {#each workflows as workflow}\r\n        <tr class=\"section-row\" height=\"40px\" on:click={() => openWorkflow(workflow.id)}>\r\n          <td>{workflow.title}</td>\r\n          <!-- <td>{workflow.type}</td> -->\r\n          <td>{workflow.lastModifiedAt}</td>\r\n        </tr>\r\n      {/each}\r\n    </table>\r\n  </div>\r\n\r\n  <h2 class=\"section-name\">\r\n    Components\r\n  </h2>\r\n  <div class=\"components-section\">\r\n    <div class=\"component-col\">\r\n      <div class=\"component-col-header\">Events</div>\r\n      {#each metadata?.eventDefs || [] as event}\r\n        <div class=\"component-col-row\">{event.title}</div>\r\n      {/each}\r\n    </div>\r\n    <div class=\"component-col\">\r\n      <div class=\"component-col-header\">Actions</div>\r\n      {#each metadata?.actionDefs || [] as action}\r\n        <div class=\"component-col-row\">{action.title}</div>\r\n      {/each}\r\n    </div>\r\n    <!-- <div class=\"component-col\">\r\n      <div class=\"component-col-header\">Templates</div>\r\n      {#each metadata?.workflowDefs || [] as workflow}\r\n        <div class=\"component-col-row\">{workflow.title}</div>\r\n      {/each}\r\n    </div> -->\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n\t.content-area {\r\n\t\tpadding: 35px 50px 35px 50px;\r\n\t\tmax-width: 1100px;\r\n\t\tmargin-right: auto;\r\n\t\tmargin-left: auto;\r\n\t}\r\n\r\n  .section-name {\r\n    font-family: 'Roboto', 'sans-serif';\r\n    font-weight: 400;\r\n    font-size: 40px;\r\n    margin-left: 10px;\r\n  }\r\n\r\n  .btn {\r\n    font-size: 18px;\r\n    font-weight: 300;\r\n    margin-left: 15px;\r\n    border: 1px solid gainsboro;\r\n    padding: 5px 10px 5px 10px;\r\n    border-radius: 2px;\r\n    vertical-align: middle;\r\n    box-shadow: 0px 2px 10px -8px;\r\n    background-color: rgb(250, 250, 250);\r\n  }\r\n\r\n  .btn:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  .section-container {\r\n    width: 100%;\r\n    min-height: 30vh;\r\n    border: 1px solid gainsboro;\r\n    border-radius: 2px;\r\n    background-color: rgb(250, 250, 250);\r\n    box-shadow: 0px 3px 20px -12px;\r\n    padding: 0 15px 15px 15px;\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  .section-table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n  }\r\n\r\n  .section-header {\r\n    text-align: left;\r\n    padding-bottom: 10px;\r\n  }\r\n\r\n  .section-row {\r\n    max-height: 20px;\r\n  }\r\n\r\n  .section-row:hover {\r\n    cursor: pointer;\r\n    background-color: rgb(229, 227, 227);\r\n  }\r\n\r\n  .components-section {\r\n    display: flex;\r\n  }\r\n\r\n  .component-col {\r\n    width: calc(100% / 2);\r\n    padding: 20px;\r\n    border: 1px solid gainsboro;\r\n    border-radius: 2px;\r\n    background-color: rgb(250, 250, 250);\r\n    box-shadow: 0px 3px 20px -12px;\r\n  }\r\n\r\n  .component-col:not(:last-child) {\r\n    margin-right: 15px;\r\n  }\r\n\r\n  .component-col-header {\r\n    font-size: 20px;\r\n    font-weight: 500;\r\n  }\r\n\r\n  .component-col-row {\r\n    margin-top: 10px;\r\n  }\r\n\r\n  .section-row > *:first-child, .section-header > *:first-child {\r\n    padding-left: 15px;\r\n  }\r\n</style>\r\n","<script>\r\n  import { getContext } from \"svelte\";\r\n\r\n  export let def\r\n  $: {\r\n    if (!def.settings) {\r\n      def.settings = {\r\n        actionId: null,\r\n        outputName: null\r\n      }\r\n    }\r\n  }\r\n\r\n  let parents = [...getContext(\"parents\")]\r\n  let prevSteps = getParentsPreviousSteps(parents.pop(), parents).reverse()\r\n\r\n  function getParentsPreviousSteps(step, parents) {\r\n    let parent = parents.pop()\r\n    if (parent.kind === \"workflow\") {\r\n      return []\r\n    }\r\n    if (parent.kind === \"path\") {\r\n      const stepIndex = parent.steps.indexOf(step)\r\n      let prevSteps = parent.steps\r\n        .slice(0, stepIndex)\r\n        .filter(x => x.kind === \"action\")\r\n      return [\r\n        ...getParentsPreviousSteps(parent, parents),\r\n        ...prevSteps\r\n      ]\r\n    }\r\n    return getParentsPreviousSteps(parent, parents)\r\n  }\r\n</script>\r\n\r\n<div class=\"ref-expression\">\r\n  <select bind:value={def.settings.actionId}>\r\n    <option value={undefined}>Select Action</option>\r\n    {#each prevSteps as prevAction}\r\n      <option value={prevAction}>{prevAction.type}</option>\r\n    {/each}\r\n  </select>\r\n  <div>\r\n    Output:\r\n  </div>\r\n  <select bind:value={def.settings.outputName}>\r\n    <option value={undefined}>Select</option>\r\n  </select>\r\n</div>\r\n\r\n<style>\r\n  .ref-expression {\r\n    display: flex;\r\n    flex-direction: row;\r\n    border: 1.75px solid #ff9120;\r\n    border-radius: 2px;\r\n    flex-wrap: wrap;\r\n    padding: 5px;\r\n    background-color: rgb(253 246 234);\r\n    gap: 7px 7px;\r\n  }\r\n</style>\r\n","<script>\r\n  export let def\r\n  $: {\r\n    if (!def.inputs) {\r\n      def.inputs = {\r\n        value: null\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<input type=\"text\" bind:value={def.inputs.value} />\r\n\r\n<style>\r\n  input {\r\n    background-color: rgb(243 243 251);\r\n    border: 1.75px solid rgb(38, 38, 205);\r\n    border-radius: 2px;\r\n  }\r\n</style>\r\n","<script>\r\n  export let def\r\n  $: {\r\n    if (!def.inputs) {\r\n      def.inputs = {\r\n        value: null\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<input type=\"number\" bind:value={def.inputs.value} />\r\n\r\n<style>\r\n  input {\r\n    background-color: rgb(255 255 236);\r\n    border: 1.75px solid rgb(194, 194, 19);\r\n    border-radius: 2px;\r\n  }\r\n</style>\r\n","<script>\r\n  import expressions from \"./expressions\"\r\n  import ExpressionSelector from \"./ExpressionSelector.svelte\"\r\n\r\n  export let def\r\n  $: {\r\n    if (def?.type !== expression?.type) {\r\n      expression = expressions.categories[0].expressions.find(x => x.type === def.type)\r\n    }\r\n  }\r\n\r\n  let expression\r\n\r\n  let self\r\n  let openSelector\r\n\r\n  function receiveSelection(e) {\r\n    // TODO mutate existing value\r\n    expression = e.detail\r\n    def.type = e.detail.type\r\n  }\r\n\r\n  function remove() {\r\n    def.type = undefined\r\n    def.inputs = {}\r\n  }\r\n</script>\r\n\r\n<div\r\n  bind:this={self}\r\n  class=\"expression-root hover-target {\"\" && \"hovering\"}\"\r\n>\r\n  {#if expression}\r\n    <svelte:component this={expression.component} def={def} />\r\n  {:else}\r\n    <div class=\"empty-expression\" on:click={openSelector}>\r\n    </div>\r\n  {/if}\r\n  <ExpressionSelector\r\n    rootEl={self}\r\n    bind:open={openSelector}\r\n    on:selection={receiveSelection}\r\n  />\r\n\r\n  {#if expression}\r\n    <div class=\"remove-btn\">\r\n      <button type=\"button\" on:click={remove}>Remove</button>\r\n    </div>\r\n  {/if}\r\n</div>\r\n\r\n<style>\r\n  .empty-expression {\r\n    background-color: white;\r\n    display: block;\r\n    min-width: 70px;\r\n    min-height: 24px;\r\n    border: 1px solid black;\r\n    border-radius: 3px;\r\n  }\r\n\r\n  .expression-root {\r\n    position: relative;\r\n  }\r\n\r\n  .remove-btn {\r\n    position: absolute;\r\n    top: 0;\r\n    transform: translate(-50%, -100%);\r\n    left: 50%;\r\n    display: none;\r\n  }\r\n\r\n  .hovering > .remove-btn {\r\n    display: block;\r\n  }\r\n</style>\r\n","<script>\r\n  import Expression from \"../Expression.svelte\"\r\n\r\n  export let def\r\n  $: {\r\n    if (!def.inputs) {\r\n      def.inputs = {\r\n        condition: { kind: \"expression\" },\r\n        trueValue: { kind: \"expression\" },\r\n        falseValue: { kind: \"expression\" }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<div class=\"decision-expression\">\r\n  <div>\r\n    <div>If</div>\r\n    <div>\r\n      <Expression def={def.inputs.condition}/>\r\n    </div>\r\n  </div>\r\n  <div>\r\n    <div>Then</div>\r\n    <div>\r\n      <Expression def={def.inputs.trueValue}/>\r\n    </div>\r\n  </div>\r\n  <div>\r\n    <div>Else</div>\r\n    <div>\r\n      <Expression def={def.inputs.falseValue}/>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .decision-expression {\r\n    display: flex;\r\n    flex-direction: row;\r\n    border: 1.75px solid rgb(129, 70, 255);\r\n    flex-wrap: wrap;\r\n    padding: 7px;\r\n    background-color: rgb(243 237 255);\r\n    gap: 7px 7px;\r\n    border-radius: 2px;\r\n  }\r\n\r\n  .decision-expression > div {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    gap: 7px 7px;\r\n  }\r\n</style>\r\n","<script>\r\n  import Expression from \"../Expression.svelte\"\r\n\r\n  export let def\r\n  $: {\r\n    if (!def.inputs) {\r\n      def.inputs = {\r\n        firstValue: { kind: \"expression\" },\r\n        secondValue: { kind: \"expression\" }\r\n      }\r\n    }\r\n    if (!def.settings) {\r\n      def.settings = {\r\n        conditionType: \"==\"\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<div class=\"condition-expression\">\r\n  <div>\r\n    <Expression def={def.inputs.firstValue}/>\r\n  </div>\r\n  <select bind:value={def.settings.conditionType}>\r\n    <option value=\"==\">Equals</option>\r\n    <option value=\"<\">Is Less Than</option>\r\n    <option value=\">\">Is Greater Than</option>\r\n  </select>\r\n  <div>\r\n    <Expression def={def.inputs.secondValue}/>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .condition-expression {\r\n    display: flex;\r\n    flex-direction: row;\r\n    border: 1.75px solid rgb(129, 70, 255);\r\n    flex-wrap: wrap;\r\n    padding: 7px;\r\n    background-color: rgb(243 237 255);\r\n    gap: 7px 7px;\r\n    border-radius: 2px;\r\n  }\r\n\r\n  .section {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    gap: 7px 7px;\r\n  }\r\n</style>\r\n","<script>\r\n  import Expression from \"../Expression.svelte\"\r\n\r\n  export let def\r\n  $: {\r\n    if (!def.inputs) {\r\n      def.inputs = {\r\n        firstCondition: { kind: \"expression\" },\r\n        secondCondition: { kind: \"expression\" }\r\n      }\r\n    }\r\n    if (!def.settings) {\r\n      def.settings = {\r\n        conditionGroupType: \"and\"\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<div class=\"and-or-expression\">\r\n  <div>\r\n    <Expression def={def.inputs.firstCondition}/>\r\n  </div>\r\n  <select bind:value={def.settings.conditionGroupType}>\r\n    <option value=\"and\">AND</option>\r\n    <option value=\"or\">OR</option>\r\n  </select>\r\n  <div>\r\n    <Expression def={def.inputs.secondCondition}/>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .and-or-expression {\r\n    display: flex;\r\n    flex-direction: row;\r\n    border: 1.75px solid rgb(129, 70, 255);\r\n    flex-wrap: wrap;\r\n    padding: 7px;\r\n    background-color: rgb(243 237 255);\r\n    gap: 7px 7px;\r\n    border-radius: 2px;\r\n  }\r\n</style>\r\n","<script context=\"module\">\r\n  let closeOthers = () => null\r\n</script>\r\n\r\n<script>\r\n  import { createEventDispatcher } from \"svelte\"\r\n  import expressions from \"./expressions\"\r\n\r\n  export let rootEl\r\n\r\n  const dispatch = createEventDispatcher()\r\n\r\n  function selectExpression(expression) {\r\n    dispatch('selection', expression)\r\n    close()\r\n  }\r\n\r\n  let show = false\r\n  export const open = () => {\r\n    if (!show) {\r\n      closeOthers()\r\n      closeOthers = close\r\n      show = true\r\n    }\r\n  }\r\n  export const close = () => {\r\n    if (show) {\r\n      show = false\r\n    }\r\n  }\r\n\r\n  function handleGlobalClick({ target }) {\r\n    if (show && !rootEl.contains(target)) {\r\n      close()\r\n    }\r\n  }\r\n</script>\r\n\r\n<svelte:window on:click={handleGlobalClick} />\r\n\r\n{#if show}\r\n  <div class=\"expression-selector\">\r\n    {#each expressions.categories as expressionCategory}\r\n      <div class=\"category\">\r\n        <div class=\"category-header\">{expressionCategory.title}</div>\r\n        <div class=\"category-values\">\r\n          {#each expressionCategory.expressions as expression}\r\n            <div on:click={() => selectExpression(expression)}>\r\n              {expression.title}\r\n            </div>\r\n          {/each}\r\n        </div>\r\n      </div>\r\n    {/each}\r\n  </div>\r\n{/if}\r\n\r\n<style>\r\n  .expression-selector {\r\n    position: absolute;\r\n    top: calc(100% + 10px);\r\n    left: calc(50%);\r\n    transform: translateX(-50%);\r\n    background-color: #fafafa;\r\n    border: .5px solid black;\r\n    min-width: 400px;\r\n    z-index: 15;\r\n    border-radius: 4px;\r\n    cursor: default;\r\n    color: black;\r\n    text-align: initial;\r\n    padding: 15px;\r\n    box-shadow: 0px 3px 10px -10px;\r\n  }\r\n\r\n  .category {\r\n    margin-bottom: 20px;\r\n  }\r\n\r\n  .category-header {\r\n    padding: 5px;\r\n    font-size: 20px;\r\n  }\r\n\r\n  .category-values {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n  .category-values > div {\r\n    margin-right: 10px;\r\n    margin-top: 10px;\r\n    background-color: lightgrey;\r\n    border: 1.2px solid lightgrey;\r\n    padding: 3px 10px;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    box-sizing: content-box;\r\n  }\r\n\r\n  .category-values > div:hover {\r\n    border: 1.2px solid gray;\r\n  }\r\n</style>\r\n","<script context=\"module\">\r\n  let closeOthers = () => null\r\n</script>\r\n\r\n<script>\r\n  import { onMount, createEventDispatcher } from \"svelte\"\r\n  import Portal from \"../../utils/Portal.svelte\"\r\n  import actions from \"./actions\"\r\n  import Expression from \"./expressions/Expression.svelte\"\r\n\r\n  export let def\r\n  export let rootEl\r\n\r\n  const dispatch = createEventDispatcher()\r\n  $: {\r\n    if (def?.type) {\r\n      dispatch(\"change-type\", def.type)\r\n    }\r\n  }\r\n\r\n  let metadata\r\n  onMount(async () => {\r\n    def.inputs = def.inputs || {}\r\n    metadata = await actions.getMetadata()\r\n  })\r\n\r\n  let actionType\r\n  $: {\r\n    actionType = metadata?.actionDefs.find(d => d.type === def.type)\r\n    setInputs()\r\n  }\r\n\r\n  function setInputs() {\r\n    if (!actionType?.inputSchema.properties) {\r\n      return;\r\n    }\r\n\r\n    const inputs = {}\r\n    for (let key in actionType?.inputSchema.properties || []) {\r\n      inputs[key] = def.inputs[key] || {\r\n        kind: \"expression\"\r\n      }\r\n    }\r\n    def.inputs = inputs\r\n  }\r\n\r\n  let showEditor = false\r\n  let editorEl\r\n  export const open = () => {\r\n    if (!showEditor) {\r\n      closeOthers()\r\n      closeOthers = close\r\n      showEditor = true\r\n    }\r\n  }\r\n  export const close = () => {\r\n    if (showEditor) {\r\n      showEditor = false\r\n    }\r\n  }\r\n\r\n  let closeBtn\r\n  function handleGlobalClick(e) {\r\n    if (\r\n      showEditor\r\n      && e.target.isConnected\r\n      && !rootEl.contains(e.target)\r\n      && !editorEl.contains(e.target)\r\n      || e.target === closeBtn) {\r\n      close()\r\n    }\r\n  }\r\n\r\n  function removeNode() {\r\n    dispatch('remove')\r\n    close()\r\n  }\r\n\r\n  $: actionInputs = Object.keys(actionType?.inputSchema.properties || {})\r\n  $: actionInputDefs = actionInputs.map(k => ({ inputName: k, inputDef: actionType.inputSchema.properties[k] }))\r\n</script>\r\n\r\n<svelte:window on:click={handleGlobalClick} />\r\n\r\n{#if showEditor}\r\n  <Portal target=\"#action-editor-portal\">\r\n    <div class=\"action-editor\" bind:this={editorEl}>\r\n      <div class=\"actions\">\r\n        <button on:click={removeNode} type=\"button\">Remove</button>\r\n        <button bind:this={closeBtn} type=\"button\">Close</button>\r\n      </div>\r\n      <!-- <div>\r\n        <label>\r\n          <div>Module</div>\r\n          <select>\r\n            <option>Google Sheets</option>\r\n            <option>Trello</option>\r\n            <option>Mailchimp</option>\r\n          </select>\r\n        </label>\r\n      </div> -->\r\n      {#if def.kind === \"action\"}\r\n        <div>\r\n          <label>\r\n            <div class=\"section-header\">Action</div>\r\n            <select bind:value={def.type}>\r\n              <option value={undefined} disabled>Select</option>\r\n              {#if metadata}\r\n                {#each metadata.actionDefs as actionDef}\r\n                  <option value={actionDef.type}>{actionDef.title}</option>\r\n                {/each}\r\n              {/if}\r\n            </select>\r\n          </label>\r\n        </div>\r\n      {/if}\r\n      {#if def.kind === \"trigger\"}\r\n        <div>\r\n          <label>\r\n            <div class=\"section-header\">Trigger</div>\r\n            <select bind:value={def.type}>\r\n              <option value={undefined} disabled>Select</option>\r\n              {#if metadata}\r\n                {#each metadata.eventDefs as eventDef}\r\n                  <option value={eventDef.type}>{eventDef.title}</option>\r\n                {/each}\r\n              {/if}\r\n            </select>\r\n          </label>\r\n        </div>\r\n      {/if}\r\n      {#if def.type && def.kind === \"action\"}\r\n        <hr />\r\n        <div class=\"inputs-section\">\r\n          <div class=\"section-header\">Inputs</div>\r\n          <div class=\"inputs-area\">\r\n            {#if actionType}\r\n              {#each actionInputDefs as { inputName, inputDef }}\r\n                <div class=\"input\">\r\n                  <div class=\"input-label\">{inputDef.title || inputName}</div>\r\n                  <div>\r\n                    <div class=\"input-value\">\r\n                      <Expression def={def.inputs[inputName]} />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              {/each}\r\n            {/if}\r\n          </div>\r\n        </div>\r\n      {/if}\r\n    </div>\r\n  </Portal>\r\n{/if}\r\n\r\n<style>\r\n  .action-editor {\r\n    position: absolute;\r\n    left: 60px;\r\n    transform: translateY(-50%);\r\n    background-color: #fafafa;\r\n    border: .5px solid black;\r\n    min-width: 300px;\r\n    max-width: 500px;\r\n    width: max-content;\r\n    z-index: 15;\r\n    border-radius: 4px;\r\n    cursor: default;\r\n    color: black;\r\n    text-align: initial;\r\n    padding: 15px;\r\n    box-shadow: 0px 3px 10px -10px;\r\n  }\r\n\r\n  .actions {\r\n    position: absolute;\r\n    top: 5px;\r\n    right: 5px;\r\n  }\r\n\r\n  .section-header {\r\n    font-size: 20px;\r\n    font-weight: 700;\r\n  }\r\n\r\n  .inputs-area {\r\n    display: table;\r\n  }\r\n\r\n  .input {\r\n    display: table-row;\r\n  }\r\n\r\n  .input > div {\r\n    display: table-cell;\r\n    vertical-align: top;\r\n    padding-top: 5px;\r\n    padding-bottom: 5px;\r\n  }\r\n\r\n  .input-label {\r\n    padding-right: 10px;\r\n    font-weight: 700;\r\n  }\r\n\r\n  select {\r\n    padding: 3px 7px;\r\n    border-radius: 2px;\r\n  }\r\n</style>\r\n","<script>\r\n  import NodeEditor from \"./NodeEditor.svelte\"\r\n  import { getContext, setContext } from \"svelte\"\r\n  import actions from \"./actions\"\r\n  import { pickColor } from \"./colors\"\r\n\r\n  export let def\r\n  export let kind\r\n\r\n  let parents = getContext(\"parents\") || []\r\n  setContext(\"parents\", [...parents, def])\r\n\r\n  let self\r\n  let openEditor\r\n\r\n  let displayName\r\n\r\n  let nodeTypeDefs\r\n  actions.getMetadata().then(m => {\r\n    if (kind === \"trigger\") {\r\n      nodeTypeDefs = m.eventDefs\r\n    } else {\r\n      nodeTypeDefs = m.actionDefs\r\n    }\r\n    setDisplayName(def?.type)\r\n  })\r\n\r\n  function setDisplayName(actionType) {\r\n    let actionDef = nodeTypeDefs?.find(a => a.type === actionType)\r\n    displayName = actionDef?.title || \"?\"\r\n  }\r\n</script>\r\n\r\n<div\r\n  class=\"node hover-target {\"\" && \"hovering\"}\"\r\n  style=\"background-color: {pickColor(displayName)}\"\r\n  on:click={openEditor}\r\n  bind:this={self}\r\n>\r\n  <div class=\"node-name\">{displayName}</div>\r\n\r\n  <NodeEditor\r\n    def={def}\r\n    rootEl={self}\r\n    bind:open={openEditor}\r\n    on:change-type={(e) => setDisplayName(e.detail)}\r\n    on:remove\r\n  />\r\n</div>\r\n\r\n<style>\r\n\r\n  .node {\r\n    background-color: black;\r\n    padding: 50px;\r\n    border-radius: 1000px;\r\n    color: white;\r\n    margin: 15px;\r\n    position: relative;\r\n    cursor: pointer;\r\n    box-shadow: black 0px 1px 6px -3px;\r\n    filter: brightness(1.1)\r\n  }\r\n\r\n  .node-name {\r\n    background-color: #f9f9f9;\r\n    padding: 0 7px;\r\n    position: absolute;\r\n    color: black;\r\n    font-size: 14px;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n    border-radius: 5px;\r\n    white-space: nowrap;\r\n    box-shadow: black 0px 1px 7px -4px;\r\n  }\r\n\r\n  .svg-path {\r\n    position: absolute;\r\n    left: 30px;\r\n    top: 30px;\r\n    z-index: -10;\r\n    width: 10px;\r\n    overflow: visible;\r\n  }\r\n\r\n  .hovering {\r\n    border: 3px solid lightblue;\r\n    padding: 47px;\r\n  }\r\n</style>\r\n","<script>\r\n  import Node from \"./Node.svelte\"\r\n  import Fork from \"./Fork.svelte\"\r\n  import AddStep from \"./AddStep.svelte\"\r\n  import { getContext, setContext, onDestroy } from \"svelte\"\r\n\r\n  export let def\r\n\r\n  let parents = getContext(\"parents\")\r\n  setContext(\"parents\", [...parents, def])\r\n\r\n  function addStep(kind, stepIndex) {\r\n    if (kind === \"action\") {\r\n      def.steps.splice(stepIndex, 0, { kind: \"action\" })\r\n    } else if (kind === \"fork\") {\r\n      let followingSteps = def.steps.splice(stepIndex)\r\n      const newStep = {\r\n        kind,\r\n        paths: [\r\n          {\r\n            kind: \"path\",\r\n            steps: followingSteps\r\n          },\r\n          {\r\n            kind: \"path\",\r\n            steps: [{ kind: \"action\" }]\r\n          }\r\n        ]\r\n      }\r\n      def.steps.push(newStep)\r\n    }\r\n\r\n    def = def\r\n  }\r\n\r\n  let rootEl\r\n  let pathDef = ''\r\n\r\n  let resizeObserver = new ResizeObserver(() => pathDef = `M 0 1 v ${rootEl?.offsetHeight -3}`);\r\n  $: if (rootEl) {\r\n    resizeObserver.observe(rootEl)\r\n  }\r\n  onDestroy(() => {\r\n    resizeObserver.disconnect()\r\n  })\r\n\r\n  function removeStep(stepIndex) {\r\n    def.steps.splice(stepIndex, 1)\r\n    def = def\r\n  }\r\n\r\n</script>\r\n\r\n<div class=\"path hover-target {\"\" && \"hovering\"}\" bind:this={rootEl}>\r\n  <div class=\"add-step\">\r\n    <AddStep on:select={(e) => addStep(e.detail.kind, 0)} kind=\"path\" />\r\n  </div>\r\n\r\n  {#each def.steps as step, stepIndex}\r\n    {#if step.kind === \"action\"}\r\n      <Node def={step} on:remove={() => removeStep(stepIndex)}/>\r\n    {:else if step.kind === \"fork\"}\r\n      <Fork def={step} />\r\n    {/if}\r\n    <div class=\"add-step\">\r\n      <AddStep on:select={(e) => addStep(e.detail.kind, stepIndex + 1)} kind=\"path\"/>\r\n    </div>\r\n  {/each}\r\n\r\n  <svg class=\"svg-path\" viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\" stroke-width=\"2.5\" stroke-linecap=\"round\">\r\n    <path fill=\"none\" stroke=\"black\" d={pathDef} />\r\n  </svg>\r\n</div>\r\n\r\n<style>\r\n  .path {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    text-align: center;\r\n    padding: 20px 5px;\r\n    padding-top: 20px;\r\n    border: .5px solid black;\r\n    border-radius: 10px;\r\n    margin: 5px;\r\n    position: relative;\r\n    background-color: #fafafa;\r\n    z-index: 1;\r\n    min-width: 50px;\r\n  }\r\n\r\n  .svg-path {\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 0;\r\n    z-index: -10;\r\n    width: 10px;\r\n    overflow: visible;\r\n  }\r\n\r\n  .add-node-btn {\r\n    background-color: white;\r\n    border: 2px solid black;\r\n    border-radius: 1000px;\r\n    color: black;\r\n    margin: 15px;\r\n    font-weight: 400;\r\n    width: 60px;\r\n    height: 60px;\r\n    font-size: 60px;\r\n    position: relative;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .hovering {\r\n    border: 3px solid lightblue;\r\n    padding: 17.5px 2.5px;\r\n  }\r\n\r\n  .add-step {\r\n    display: none;\r\n  }\r\n\r\n  .hovering > .add-step {\r\n    display: block;\r\n  }\r\n</style>\r\n","<script>\r\n  import { createEventDispatcher } from \"svelte\"\r\n\r\n  export let kind;\r\n\r\n  const dispatch = createEventDispatcher()\r\n</script>\r\n\r\n<div class=\"add-step-container\">\r\n  <div class=\"add-step\">\r\n    <div class=\"placeholder\">\r\n      <div class=\"placeholder-text\">...</div>\r\n    </div>\r\n    <div class=\"add-step-btns\">\r\n      {#if kind === \"path\"}\r\n        <button type=\"button\" on:click={() => dispatch(\"select\", { kind: \"action\" })}>⬤</button>\r\n        <button type=\"button\" on:click={() => dispatch(\"select\", { kind: \"fork\" })}>⅄</button>\r\n        <!-- <button type=\"button\" on:click={() => dispatch(\"select\", { kind: \"loop\" })}>↻</button> -->\r\n      {:else if kind === \"trigger\"}\r\n        <button type=\"button\" on:click={() => dispatch(\"select\")}>＋</button>\r\n      {:else}\r\n        <button type=\"button\" on:click={() => dispatch(\"select\")}>ᛣ</button>\r\n      {/if}\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .add-step-container {\r\n    position: relative;\r\n    width: 10px;\r\n  }\r\n\r\n  .add-step {\r\n    position: absolute;\r\n    width: 100px;\r\n    height: 30px;\r\n    top: -15px;\r\n    left: -45px;\r\n    z-index: 5\r\n  }\r\n\r\n  .add-step-btns button {\r\n    background-color: black;\r\n    border: none;\r\n    color: white;\r\n    border-radius: 100px;\r\n    cursor: pointer;\r\n    width: 25px;\r\n    height: 25px;\r\n  }\r\n\r\n  .add-step:hover .placeholder {\r\n    display: none;\r\n  }\r\n\r\n  .add-step:not(:hover) .add-step-btns {\r\n    display: none;\r\n  }\r\n\r\n  .placeholder {\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n    color: white;\r\n    font-weight: 700;\r\n    background-color: black;\r\n    padding: 2px;\r\n    width: 20px;\r\n    height: 20px;\r\n    border-radius: 100px;\r\n  }\r\n\r\n  .placeholder-text {\r\n    line-height: 9px;\r\n    text-align: center;\r\n  }\r\n</style>\r\n","<script>\r\n  import Path from \"./Path.svelte\"\r\n  import AddStep from \"./AddStep.svelte\"\r\n  import { getContext, setContext } from \"svelte\"\r\n\r\n  export let def;\r\n\r\n  let parents = getContext(\"parents\") || []\r\n  setContext(\"parents\", [...parents, def])\r\n\r\n  let forkRef;\r\n\r\n  let observing = false;\r\n  $: {\r\n    if (forkRef && !observing) {\r\n      observing = true\r\n      new ResizeObserver(() => def = def).observe(forkRef)\r\n    }\r\n  }\r\n\r\n  function getLine(pathIndex, forkRef) {\r\n    let pathEl = forkRef.children[pathIndex + 1]\r\n    if (!pathEl) {\r\n      return 0\r\n    }\r\n\r\n    const containerCenterX = forkRef.offsetWidth / 2\r\n    const containerBottom = pathEl.offsetHeight + 30\r\n\r\n    return `\r\n      M ${containerCenterX} -1 L ${pathEl.offsetLeft + (pathEl.offsetWidth / 2)} 31\r\n      M ${containerCenterX} ${forkRef.offsetHeight + 1} L ${pathEl.offsetLeft + (pathEl.offsetWidth / 2)} ${containerBottom}\r\n    `\r\n  }\r\n\r\n  function addPath() {\r\n    def.paths.push({\r\n      kind: \"path\",\r\n      steps: [{\r\n        kind: \"action\"\r\n      }]\r\n    })\r\n    def = def\r\n  }\r\n\r\n</script>\r\n\r\n<div class=\"fork hover-target {\"\" && \"hovering\"}\" bind:this={forkRef}>\r\n\r\n  <div class=\"add-step\">\r\n    <AddStep on:select={addPath} kind=\"branch\"/>\r\n  </div>\r\n\r\n  {#each def.paths as path}\r\n    <Path def={path} />\r\n  {/each}\r\n\r\n  <svg class=\"svg-path\" viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\" stroke-width=\"2.5\" stroke-linecap=\"round\">\r\n    {#if forkRef}\r\n      {#each def.paths as _, pathIndex}\r\n        <path fill=\"none\" stroke=\"black\" d={getLine(pathIndex, forkRef)} />\r\n      {/each}\r\n    {/if}\r\n  </svg>\r\n</div>\r\n\r\n<style>\r\n  .fork {\r\n    display: flex;\r\n    flex-direction: row;\r\n    padding: 25px 5px;\r\n    border: .5px solid black;\r\n    border-radius: 10px;\r\n    margin: 5px;\r\n    position: relative;\r\n    background-color: #fafafa;\r\n    z-index: 1;\r\n  }\r\n\r\n  .svg-path {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    z-index: 1;\r\n    width: 10px;\r\n    height: 10px;\r\n    overflow: visible;\r\n  }\r\n\r\n  .hovering {\r\n    border: 3px solid lightblue;\r\n    padding: 22.5px 2.5px;\r\n  }\r\n\r\n  .add-step {\r\n    position: absolute;\r\n    top: 15px;\r\n    left: calc(50% - 5px);\r\n    display: none;\r\n  }\r\n\r\n  .hovering > .add-step {\r\n    display: block;\r\n  }\r\n</style>\r\n","<script>\r\n  import Node from \"./Node.svelte\"\r\n  import AddStep from \"./AddStep.svelte\"\r\n\r\n  export let triggers\r\n\r\n  function addTrigger(kind, stepIndex) {\r\n    triggers.push({\r\n      kind: \"trigger\"\r\n    })\r\n    triggers = triggers\r\n  }\r\n</script>\r\n\r\n<div class=\"trigger-set hover-target {\"\" && \"hovering\"}\">\r\n  {#each triggers as trigger}\r\n    <Node kind=\"trigger\" def={trigger} />\r\n  {/each}\r\n  <div class=\"add-trigger\">\r\n    <AddStep on:select={addTrigger} kind=\"trigger\"/>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  .trigger-set {\r\n    display: flex;\r\n    flex-direction: row;\r\n    padding: 5px;\r\n    border: .5px solid black;\r\n    border-radius: 10px;\r\n    margin: 5px;\r\n    position: relative;\r\n  }\r\n\r\n  .add-trigger {\r\n    position: absolute;\r\n    right: -45px;\r\n    top: calc(50% - 5px);\r\n  }\r\n\r\n  .hovering {\r\n    border: 3px solid lightblue;\r\n    padding: 2.5px 2.5px;\r\n  }\r\n</style>\r\n","<script>\r\n  import actions from \"./actions\"\r\n  import Path from \"./Path.svelte\"\r\n  import Triggers from \"./Triggers.svelte\"\r\n  import { getContext, setContext } from \"svelte\"\r\n\r\n  export let workflowId\r\n\r\n  let workflow\r\n\r\n  if (workflowId) {\r\n    actions.getWorkflow(workflowId).then(w => workflow = w)\r\n  } else {\r\n    workflow = {\r\n      kind: \"workflow\",\r\n      triggers: [{\r\n        kind: \"trigger\"\r\n      }],\r\n      path: {\r\n        id: 0,\r\n        kind: \"path\",\r\n        steps: [{\r\n          kind: \"action\"\r\n        }]\r\n      }\r\n    }\r\n  }\r\n\r\n  $: setContext(\"parents\", [workflow])\r\n\r\n  let history = getContext('history')\r\n\r\n  let workflowJSON\r\n  $: {\r\n    workflowJSON = JSON.stringify(workflow || null, null, 2)\r\n  }\r\n\r\n  async function saveWorkflow() {\r\n    let newWorkflow = {\r\n      ...workflow,\r\n      lastModifiedAt: (new Date()).toLocaleString(),\r\n    }\r\n    if (workflow.id) {\r\n      workflow = await actions.updateWorkflow(workflow.id, newWorkflow)\r\n    } else {\r\n      workflow = await actions.createWorkflow(newWorkflow)\r\n      history.pushState(`/workflow/?workflow-id=${workflow.id}`)\r\n    }\r\n  }\r\n\r\n  function close() {\r\n    history.pushState('/')\r\n  }\r\n\r\n  function setHover(e) {\r\n    let nearestExpr = e.target.closest(\".hover-target\")\r\n    if (nearestExpr?.matches(\".hovering\")) {\r\n      return\r\n    }\r\n    for (let el of document.querySelectorAll(\".hovering\")) {\r\n      el.classList.remove(\"hovering\")\r\n    }\r\n    nearestExpr?.classList.add(\"hovering\")\r\n  }\r\n</script>\r\n\r\n<svelte:window on:mouseover={setHover} />\r\n\r\n{#if workflow}\r\n  <div class=\"workflow-editor\">\r\n    <div class=\"workflow-view-panel\">\r\n      <div class=\"workflow-view-container\">\r\n        <p style=\"float: right;\">\r\n          <button class=\"close-workflow btn\" type=\"button\" on:click={close}>Close</button>\r\n          <button type=\"button\" class=\"action-editor-save-btn btn\" on:click={saveWorkflow}>Save</button>\r\n        </p>\r\n        <input\r\n          class=\"title-input\"\r\n          type=\"text\"\r\n          bind:value={workflow.title}\r\n          placeholder=\"Title\"\r\n        />\r\n        <div class=\"node-flow\">\r\n          <div class=\"section-headers\">Triggers</div>\r\n          <Triggers triggers={workflow.triggers} />\r\n          <div class=\"section-headers\">Workflow</div>\r\n          <Path def={workflow.path} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div id=\"action-editor-portal\"></div>\r\n\r\n  <!-- <div class=\"json-viewer\">\r\n    <code>\r\n      <div><button type=\"button\" on:click={() => workflow = workflow}>Refresh</button></div>\r\n      {workflowJSON}\r\n    </code>\r\n  </div> -->\r\n{/if}\r\n\r\n<style>\r\n  .workflow-editor {\r\n    display: flex;\r\n    align-items: stretch;\r\n    justify-content: center;\r\n    width: 100%;\r\n    height: 100%\r\n  }\r\n\r\n  .workflow-view-panel {\r\n    padding-top: 35px;\r\n    min-width: 700px;\r\n    flex-grow: 5;\r\n  }\r\n\r\n  .workflow-view-container {\r\n    max-width: 900px;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n  }\r\n\r\n  .title-input {\r\n    border: none;\r\n    outline: none;\r\n\t\tbackground-color: #fafafa;\r\n    font-size: 36px;\r\n    width: 700px;\r\n    font-weight: 300;\r\n  }\r\n\r\n  .node-flow {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding-top: 10px;\r\n  }\r\n\r\n  .section-headers {\r\n    font-size: 30px;\r\n    font-weight: 300;\r\n    margin: 10px;\r\n  }\r\n\r\n  .btn {\r\n    font-size: 18px;\r\n    font-weight: 300;\r\n    margin-left: 15px;\r\n    border: 1px solid gainsboro;\r\n    padding: 5px 10px 5px 10px;\r\n    border-radius: 2px;\r\n    vertical-align: middle;\r\n    box-shadow: 0px 2px 10px -8px;\r\n    background-color: rgb(250, 250, 250);\r\n  }\r\n\r\n  .btn:hover {\r\n    cursor: pointer;\r\n  }\r\n\r\n  .json-viewer {\r\n    white-space: pre;\r\n    background-color: white;\r\n    color: gray;\r\n    margin-top: 20px;\r\n  }\r\n</style>\r\n","<script>\r\nimport { setContext } from \"svelte\";\r\n\r\n\timport Nav from \"./Nav.svelte\"\r\n\timport Router from \"./Router.svelte\"\r\n\r\n\tlet history = {\r\n\t\tpushState() {}\r\n\t}\r\n\r\n\tsetContext('history', history)\r\n\r\n</script>\r\n\r\n<div class=\"background\">\r\n\t<Nav/>\r\n\t<div class=\"main-body\">\r\n\t\t<Router />\r\n\t</div>\r\n</div>\r\n\r\n<style>\r\n\t.background {\r\n\t\tbackground-color: #fafafa;\r\n\t\tposition: fixed;\r\n\t\tleft: 0;\r\n\t\tright: 0;\r\n\t\ttop: 0;\r\n\t\tbottom: 0;\r\n\t\tfont-family: 'Roboto', sans-serif;\r\n\t\toverflow-y: auto;\r\n\t}\r\n</style>\r\n","*,*::before,*::after{box-sizing:border-box}body,h1,h2,h3,h4,p,figure,blockquote,dl,dd{margin:0}ul[role=\"list\"],ol[role=\"list\"]{list-style:none}html:focus-within{scroll-behavior:smooth}body{min-height:100vh;text-rendering:optimizeSpeed;line-height:1.5}a:not([class]){text-decoration-skip-ink:auto}img,picture{max-width:100%;display:block}input,button,textarea,select{font:inherit}@media(prefers-reduced-motion:reduce){html:focus-within{scroll-behavior:auto}*,*::before,*::after{animation-duration:.01ms !important;animation-iteration-count:1 !important;transition-duration:.01ms !important;scroll-behavior:auto !important}}\n"],"names":[],"version":3,"file":"index.70c50bdf.css.map","sourceRoot":"../../"}